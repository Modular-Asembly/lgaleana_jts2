import datetime
from typing import List, Dict, Any

from sqlalchemy.orm import Session
from app.core.database.sql_adaptor import SessionLocal
from app.models.upload_status import UploadStatus

def store_success_records(success_data: List[Dict[str, Any]]) -> List[UploadStatus]:
    """
    Stores details of successful conversion uploads into the database.
    
    Each record in success_data is expected to be a dictionary with the following keys:
      - 'salesforce_id': str - The Salesforce Opportunity Id.
      - 'gclid': Optional[str] - The GCLID value from the Salesforce record.
      - 'original_lead_created_datetime': datetime or ISO formatted str - When the lead was created.
      - 'admission_date': datetime or ISO formatted str - The date of admission.
      - 'status': str - The upload status, expected to be 'successful'.
      - 'error_details': Optional[str] - Should be None or empty for successful uploads.
      
    Returns:
        A list of UploadStatus instances that have been stored in the database.
    
    Raises:
        Any exceptions raised during database operations.
    """
    stored_records: List[UploadStatus] = []
    
    # Open a new database session.
    with SessionLocal() as session:
        # Iterate over each record from the input data.
        for record in success_data:
            # Parse datetime fields if they are provided as strings.
            # If they are already datetime objects, they remain unchanged.
            original_lead_created_datetime = record.get("original_lead_created_datetime")
            if isinstance(original_lead_created_datetime, str):
                original_lead_created_datetime = datetime.datetime.fromisoformat(original_lead_created_datetime)
            
            admission_date = record.get("admission_date")
            if isinstance(admission_date, str):
                admission_date = datetime.datetime.fromisoformat(admission_date)
            
            upload_status = UploadStatus(
                salesforce_id=record["salesforce_id"],
                gclid=record.get("gclid"),
                original_lead_created_datetime=original_lead_created_datetime,
                admission_date=admission_date,
                status=record["status"],
                error_details=record.get("error_details")
            )
            
            session.add(upload_status)
            stored_records.append(upload_status)
        
        session.commit()
        # Refresh all instances to reflect data from the database (e.g., autogenerated id, timestamp)
        for rec in stored_records:
            session.refresh(rec)
    
    return stored_records
